{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    setTransactionsByEmployee(data);\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n\n  const updateTransaction = (id, updates) => {\n    setData(prev => prev ? prev.map(tx => tx.id === id ? { ...tx,\n      ...updates\n    } : tx) : prev);\n  };\n\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    updateTransaction\n  };\n}\n\n_s(useTransactionsByEmployee, \"kKvyfBKX5wcdmUqML83LxPYcyfE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","data","invalidateData","updateTransaction","id","updates","setData","prev","map","tx"],"sources":["C:/Users/iaanu/Desktop/ramp-fe-challenge/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        {\n          employeeId,\n        }\n      )\n\n      setTransactionsByEmployee(data)\n    },\n    [fetchWithCache]\n  )\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n  const updateTransaction = (id: string, updates: Partial<Transaction>) => {\n    setData((prev) =>\n      prev\n        ? prev.map((tx) => (tx.id === id ? { ...tx, ...updates } : tx))\n        : prev\n    )\n  }\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, updateTransaction }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EAEA,MAAMO,SAAS,GAAGR,WAAW,CAC3B,MAAOS,UAAP,IAA8B;IAC5B,MAAMC,IAAI,GAAG,MAAMN,cAAc,CAC/B,wBAD+B,EAE/B;MACEK;IADF,CAF+B,CAAjC;IAOAF,yBAAyB,CAACG,IAAD,CAAzB;EACD,CAV0B,EAW3B,CAACN,cAAD,CAX2B,CAA7B;EAcA,MAAMO,cAAc,GAAGX,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;;EAGA,MAAMK,iBAAiB,GAAG,CAACC,EAAD,EAAaC,OAAb,KAA+C;IACvEC,OAAO,CAAEC,IAAD,IACNA,IAAI,GACAA,IAAI,CAACC,GAAL,CAAUC,EAAD,IAASA,EAAE,CAACL,EAAH,KAAUA,EAAV,GAAe,EAAE,GAAGK,EAAL;MAAS,GAAGJ;IAAZ,CAAf,GAAuCI,EAAzD,CADA,GAEAF,IAHC,CAAP;EAKD,CAND;;EAOA,OAAO;IAAEN,IAAI,EAAEJ,sBAAR;IAAgCD,OAAhC;IAAyCG,SAAzC;IAAoDG,cAApD;IAAoEC;EAApE,CAAP;AACD;;GA7BeT,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}