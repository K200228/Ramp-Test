{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) return previousResponse;\n\n      if (previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  const updateTransaction = useCallback((transactionId, updatedFields) => {\n    setPaginatedTransactions(prev => {\n      if (prev === null) return null;\n      return { ...prev,\n        data: prev.data.map(tx => tx.id === transactionId ? { ...tx,\n          ...updatedFields\n        } : tx)\n      };\n    });\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    updateTransaction\n  };\n}\n\n_s(usePaginatedTransactions, \"YUNu13RqzLAMfsx0iKk9g19vSlk=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","data","invalidateData","updateTransaction","transactionId","updatedFields","prev","map","tx","id"],"sources":["C:/Users/iaanu/Desktop/ramp-fe-challenge/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) return previousResponse\n\n      if (previousResponse === null) {\n        return response\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      }\n    })\n\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  const updateTransaction = useCallback((transactionId: string, updatedFields: Partial<Transaction>) => {\n    setPaginatedTransactions((prev) => {\n      if (prev === null) return null\n\n      return {\n        ...prev,\n        data: prev.data.map((tx) =>\n          tx.id === transactionId ? { ...tx, ...updatedFields } : tx\n        ),\n      }\n    })\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, updateTransaction }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFmC,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAjB,EAAuB,OAAOG,gBAAP;;MAEvB,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B,OAAOH,QAAP;MACD;;MAED,OAAO;QACLI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;QAELF,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CAXuB,CAAxB;EAaD,CArB2B,EAqBzB,CAACP,cAAD,EAAiBE,qBAAjB,CArByB,CAA5B;EAuBA,MAAMQ,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,MAAMQ,iBAAiB,GAAGf,WAAW,CAAC,CAACgB,aAAD,EAAwBC,aAAxB,KAAgE;IACpGV,wBAAwB,CAAEW,IAAD,IAAU;MACjC,IAAIA,IAAI,KAAK,IAAb,EAAmB,OAAO,IAAP;MAEnB,OAAO,EACL,GAAGA,IADE;QAELL,IAAI,EAAEK,IAAI,CAACL,IAAL,CAAUM,GAAV,CAAeC,EAAD,IAClBA,EAAE,CAACC,EAAH,KAAUL,aAAV,GAA0B,EAAE,GAAGI,EAAL;UAAS,GAAGH;QAAZ,CAA1B,GAAwDG,EADpD;MAFD,CAAP;IAMD,CATuB,CAAxB;EAUD,CAXoC,EAWlC,EAXkC,CAArC;EAaA,OAAO;IAAEP,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDM,cAAlD;IAAkEC;EAAlE,CAAP;AACD;;GA/CeZ,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}