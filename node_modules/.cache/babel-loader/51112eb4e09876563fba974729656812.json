{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iaanu\\\\Desktop\\\\ramp-fe-challenge\\\\ramp-fe-challenge\\\\src\\\\components\\\\InputSelect\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const inputRef = useRef(null);\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) return;\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      const rect = inputRef.current.getBoundingClientRect();\n      setDropdownPosition({\n        top: window.scrollY + rect.top + rect.height,\n        left: rect.left\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (!isDropdownOpen) return;\n    updateDropdownPosition();\n    window.addEventListener(\"scroll\", updateDropdownPosition);\n    window.addEventListener(\"resize\", updateDropdownPosition);\n    return () => {\n      window.removeEventListener(\"scroll\", updateDropdownPosition);\n      window.removeEventListener(\"resize\", updateDropdownPosition);\n    };\n  }, [isDropdownOpen, updateDropdownPosition]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    onStateChange: changes => {\n      if (Object.prototype.hasOwnProperty.call(changes, \"isOpen\")) {\n        var _changes$isOpen;\n\n        setIsDropdownOpen((_changes$isOpen = changes.isOpen) !== null && _changes$isOpen !== void 0 ? _changes$isOpen : false);\n      }\n    },\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: _ref2 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref2;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          ref: inputRef,\n          onClick: event => {\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this);\n\n      function renderItems() {\n        if (!isOpen) return null;\n\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 20\n          }, this);\n        }\n\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 20\n          }, this);\n        }\n\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputSelect, \"Y5J2wJ7fneHpFBJ1t+Qv4C4ssJQ=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: scrollY + top + 63,\n      left\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useEffect","useRef","useState","classNames","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","isDropdownOpen","setIsDropdownOpen","inputRef","selectedItem","updateDropdownPosition","current","rect","getBoundingClientRect","window","scrollY","height","addEventListener","removeEventListener","changes","Object","prototype","hasOwnProperty","call","isOpen","item","getItemProps","getLabelProps","getMenuProps","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","event","onClick","renderItems","length","map","index","parsedItem","key","value","className","getDropdownPosition","target","Element"],"sources":["C:/Users/iaanu/Desktop/ramp-fe-challenge/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\nimport classNames from \"classnames\"\nimport {\n  DropdownPosition,\n  GetDropdownPositionFn,\n  InputSelectOnChange,\n  InputSelectProps,\n} from \"./types\"\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n    top: 0,\n    left: 0,\n  })\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\n  const inputRef = useRef<HTMLDivElement | null>(null)\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) return\n\n      consumerOnChange(selectedItem)\n      setSelectedValue(selectedItem)\n    },\n    [consumerOnChange]\n  )\n\n  const updateDropdownPosition = useCallback(() => {\n    if (inputRef.current) {\n      const rect = inputRef.current.getBoundingClientRect()\n      setDropdownPosition({\n        top: window.scrollY + rect.top + rect.height,\n        left: rect.left,\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!isDropdownOpen) return\n\n    updateDropdownPosition()\n    window.addEventListener(\"scroll\", updateDropdownPosition)\n    window.addEventListener(\"resize\", updateDropdownPosition)\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateDropdownPosition)\n      window.removeEventListener(\"resize\", updateDropdownPosition)\n    }\n  }, [isDropdownOpen, updateDropdownPosition])\n\n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={onChange}\n      selectedItem={selectedValue}\n      onStateChange={(changes) => {\n        if (Object.prototype.hasOwnProperty.call(changes, \"isOpen\")) {\n          setIsDropdownOpen(changes.isOpen ?? false)\n        }\n      }}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps()\n        const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n        return (\n          <div className=\"RampInputSelect--root\">\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n              {label}\n            </label>\n            <div className=\"RampBreak--xs\" />\n            <div\n              className=\"RampInputSelect--input\"\n              ref={inputRef}\n              onClick={(event) => {\n                toggleProps.onClick(event)\n              }}\n            >\n              {inputValue}\n            </div>\n\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": isOpen,\n              })}\n              {...getMenuProps()}\n              style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n            >\n              {renderItems()}\n            </div>\n          </div>\n        )\n\n        function renderItems() {\n          if (!isOpen) return null\n\n          if (isLoading) {\n            return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n          }\n\n          if (items.length === 0) {\n            return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n          }\n\n          return items.map((item, index) => {\n            const parsedItem = parseItem(item)\n            return (\n              <div\n                key={parsedItem.value}\n                {...getItemProps({\n                  key: parsedItem.value,\n                  index,\n                  item,\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                    \"RampInputSelect--dropdown-item-selected\":\n                      parsedSelectedItem?.value === parsedItem.value,\n                  }),\n                })}\n              >\n                {parsedItem.label}\n              </div>\n            )\n          })\n        }\n      }}\n    </Downshift>\n  )\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const { top, left } = target.getBoundingClientRect()\n    const { scrollY } = window\n    return {\n      top: scrollY + top + 63,\n      left,\n    }\n  }\n\n  return { top: 0, left: 0 }\n}\n"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAQA,OAAO,SAASC,WAAT,OAQqB;EAAA;;EAAA,IARO;IACjCC,KADiC;IAEjCC,YAFiC;IAGjCC,QAAQ,EAAEC,gBAHuB;IAIjCC,KAJiC;IAKjCC,SALiC;IAMjCC,SANiC;IAOjCC;EAPiC,CAQP;EAC1B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAeI,YAAf,aAAeA,YAAf,cAAeA,YAAf,GAA+B,IAA/B,CAAlD;EACA,MAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAmB;IACzEe,GAAG,EAAE,CADoE;IAEzEC,IAAI,EAAE;EAFmE,CAAnB,CAAxD;EAKA,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,KAAD,CAApD;EACA,MAAMmB,QAAQ,GAAGpB,MAAM,CAAwB,IAAxB,CAAvB;EAEA,MAAMM,QAAQ,GAAGR,WAAW,CACzBuB,YAAD,IAAkB;IAChB,IAAIA,YAAY,KAAK,IAArB,EAA2B;IAE3Bd,gBAAgB,CAACc,YAAD,CAAhB;IACAR,gBAAgB,CAACQ,YAAD,CAAhB;EACD,CANyB,EAO1B,CAACd,gBAAD,CAP0B,CAA5B;EAUA,MAAMe,sBAAsB,GAAGxB,WAAW,CAAC,MAAM;IAC/C,IAAIsB,QAAQ,CAACG,OAAb,EAAsB;MACpB,MAAMC,IAAI,GAAGJ,QAAQ,CAACG,OAAT,CAAiBE,qBAAjB,EAAb;MACAV,mBAAmB,CAAC;QAClBC,GAAG,EAAEU,MAAM,CAACC,OAAP,GAAiBH,IAAI,CAACR,GAAtB,GAA4BQ,IAAI,CAACI,MADpB;QAElBX,IAAI,EAAEO,IAAI,CAACP;MAFO,CAAD,CAAnB;IAID;EACF,CARyC,EAQvC,EARuC,CAA1C;EAUAlB,SAAS,CAAC,MAAM;IACd,IAAI,CAACmB,cAAL,EAAqB;IAErBI,sBAAsB;IACtBI,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCP,sBAAlC;IACAI,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCP,sBAAlC;IAEA,OAAO,MAAM;MACXI,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCR,sBAArC;MACAI,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCR,sBAArC;IACD,CAHD;EAID,CAXQ,EAWN,CAACJ,cAAD,EAAiBI,sBAAjB,CAXM,CAAT;EAaA,oBACE,QAAC,SAAD;IACE,EAAE,EAAC,YADL;IAEE,QAAQ,EAAEhB,QAFZ;IAGE,YAAY,EAAEM,aAHhB;IAIE,aAAa,EAAGmB,OAAD,IAAa;MAC1B,IAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,OAArC,EAA8C,QAA9C,CAAJ,EAA6D;QAAA;;QAC3DZ,iBAAiB,oBAACY,OAAO,CAACK,MAAT,6DAAmB,KAAnB,CAAjB;MACD;IACF,CARH;IASE,YAAY,EAAGC,IAAD,IAAWA,IAAI,GAAG5B,SAAS,CAAC4B,IAAD,CAAT,CAAgBjC,KAAnB,GAA2B,EAT1D;IAAA,UAWG,SASK;MAAA,IATJ;QACAkC,YADA;QAEAC,aAFA;QAGAC,YAHA;QAIAJ,MAJA;QAKAK,gBALA;QAMApB,YANA;QAOAqB,oBAPA;QAQAC;MARA,CASI;MACJ,MAAMC,WAAW,GAAGF,oBAAoB,EAAxC;MACA,MAAMG,kBAAkB,GAAGxB,YAAY,KAAK,IAAjB,GAAwB,IAAxB,GAA+BZ,SAAS,CAACY,YAAD,CAAnE;MAEA,oBACE;QAAK,SAAS,EAAC,uBAAf;QAAA,wBACE;UAAO,SAAS,EAAC,8BAAjB;UAAA,GAAoDkB,aAAa,EAAjE;UAAA,UACGnC;QADH;UAAA;UAAA;UAAA;QAAA,QADF,eAIE;UAAK,SAAS,EAAC;QAAf;UAAA;UAAA;UAAA;QAAA,QAJF,eAKE;UACE,SAAS,EAAC,wBADZ;UAEE,GAAG,EAAEgB,QAFP;UAGE,OAAO,EAAG0B,KAAD,IAAW;YAClBF,WAAW,CAACG,OAAZ,CAAoBD,KAApB;UACD,CALH;UAAA,UAOGH;QAPH;UAAA;UAAA;UAAA;QAAA,QALF,eAeE;UACE,SAAS,EAAEzC,UAAU,CAAC,qCAAD,EAAwC;YAC3D,8CAA8CkC;UADa,CAAxC,CADvB;UAAA,GAIMI,YAAY,EAJlB;UAKE,KAAK,EAAE;YAAExB,GAAG,EAAEF,gBAAgB,CAACE,GAAxB;YAA6BC,IAAI,EAAEH,gBAAgB,CAACG;UAApD,CALT;UAAA,UAOG+B,WAAW;QAPd;UAAA;UAAA;UAAA;QAAA,QAfF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF;;MA4BA,SAASA,WAAT,GAAuB;QACrB,IAAI,CAACZ,MAAL,EAAa,OAAO,IAAP;;QAEb,IAAI1B,SAAJ,EAAe;UACb,oBAAO;YAAK,SAAS,EAAC,gCAAf;YAAA,WAAiDC,YAAjD;UAAA;YAAA;YAAA;YAAA;UAAA,QAAP;QACD;;QAED,IAAIH,KAAK,CAACyC,MAAN,KAAiB,CAArB,EAAwB;UACtB,oBAAO;YAAK,SAAS,EAAC,gCAAf;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAP;QACD;;QAED,OAAOzC,KAAK,CAAC0C,GAAN,CAAU,CAACb,IAAD,EAAOc,KAAP,KAAiB;UAChC,MAAMC,UAAU,GAAG3C,SAAS,CAAC4B,IAAD,CAA5B;UACA,oBACE,oBAEMC,YAAY,CAAC;cACfe,GAAG,EAAED,UAAU,CAACE,KADD;cAEfH,KAFe;cAGfd,IAHe;cAIfkB,SAAS,EAAErD,UAAU,CAAC,gCAAD,EAAmC;gBACtD,8CAA8CuC,gBAAgB,KAAKU,KADb;gBAEtD,2CACE,CAAAN,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAES,KAApB,MAA8BF,UAAU,CAACE;cAHW,CAAnC;YAJN,CAAD,CAFlB;YAAA,UAaGF,UAAU,CAAChD;UAbd,GACOgD,UAAU,CAACE,KADlB;YAAA;YAAA;YAAA;UAAA,QADF;QAiBD,CAnBM,CAAP;MAoBD;IACF;EApFH;IAAA;IAAA;IAAA;EAAA,QADF;AAwFD;;GA3IenD,W;;KAAAA,W;;AA6IhB,MAAMqD,mBAA0C,GAAIC,MAAD,IAAY;EAC7D,IAAIA,MAAM,YAAYC,OAAtB,EAA+B;IAC7B,MAAM;MAAE1C,GAAF;MAAOC;IAAP,IAAgBwC,MAAM,CAAChC,qBAAP,EAAtB;IACA,MAAM;MAAEE;IAAF,IAAcD,MAApB;IACA,OAAO;MACLV,GAAG,EAAEW,OAAO,GAAGX,GAAV,GAAgB,EADhB;MAELC;IAFK,CAAP;EAID;;EAED,OAAO;IAAED,GAAG,EAAE,CAAP;IAAUC,IAAI,EAAE;EAAhB,CAAP;AACD,CAXD"},"metadata":{},"sourceType":"module"}